{ 
  'variables':{
    # Definiton of variables that can be interpolated and used in various 
    # other parts of the file.
  },
  'includes':[
    # include other gyp settings suffix .gypi
  ],
  'target_defaults':{  
    # settings that will apply to all of the targets defined 
    # in this .gyp.
    #'default_configuration':'Release',
    'default_configuration':'Debug',
    },
  'targets': [
    # The list of targets for which this .gyp file can generate builds.
    # Each target is a dictionary that contains settings describing all
    # information necessary to build the target.
    {
      'target_name': 'svmpredict',
      #'type':'',
      #'variables': '',
      'sources': [
        #'src/svmpredict-node.cpp',
        'src/svm-predict.cpp',
        'src/svm.cpp'
       ],
      'include_dirs': [
        'include'
      ],
      'conditions': [
        # A list of condition specifications that can modify the contents of the items
        # in the global dictionary defined by this .gyp file based on the values of
        # different variables. The common us of a condition section in the top-level
        # dictionary is to add platform-specific targets to the targets list.
        ['OS=="mac" or OS=="Darwin"', {
          'variables':{
            'mac_sdk_min%':'10.8',
            'mac_deployment_target%':'10.8',
          },
          'mac_sdk_min': '<(mac_sdk_min)',
          'mac_deployment_target': '<(mac_deployment_target)',
          'xcode_settings': {
              'ALWAYS_SEARCH_USER_PATHS':'YES',
              'GCC_C_LANGUAGE_STANDARD': 'c99',         # -std=c99
              'GCC_CW_ASM_SYNTAX': 'NO',                # No -fasm-blocks
              'GCC_DYNAMIC_NO_PIC': 'NO',               # No -mdynamic-no-pic
                                                        # (Equivalent to -fPIC)
              'GCC_CW_ASM_SYNTAX': 'NO',                # No -fasm-blocks
              'GCC_ENABLE_CPP_EXCEPTIONS': 'NO',        # -fno-exceptions
              'GCC_ENABLE_CPP_RTTI': 'NO',              # -fno-rtti
              'GCC_ENABLE_PASCAL_STRINGS': 'NO',        # No -mpascal-strings
              'GCC_THREADSAFE_STATICS': 'NO',           # -fno-threadsafe-statics
              'GCC_TREAT_WARNINGS_AS_ERRORS': 'NO',     # -Werror
              'PREBINDING': 'NO',                       # No -Wl,-prebind
          
              # -mmacosx-version-min=10.5
              'MACOSX_DEPLOYMENT_TARGET':'<(mac_deployment_target)',
              'USE_HEADERMAP': 'NO',
          
              'GCC_OPTIMIZATION_LEVEL': '3',  # -O3     # optimize -O3
          
              # c++ 11 Options
              'CLANG_CXX_LANGUAGE_STANDARD': 'c++11',   # c++
              'OTHER_CPLUSPLUSFLAGS':['-std=c++11','-stdlib=libc++'],
              'OTHER_LDFLAGS':['-stdlib=libc++'],       # when using c++11
          
              # Warn if automatic synthesis is triggered with
              # the -Wobjc-missing-property-synthesis flag.
              'CLANG_WARN_OBJC_MISSING_PROPERTY_SYNTHESIS': 'YES', 
          
              'OTHER_CFLAGS': [
                '-fno-strict-aliasing',
                '-fstack-protector-all',  # Implies -fstack-protector
              ],
          
              'WARNING_CFLAGS': [
                '-Wall',
                '-Wendif-labels',
                '-Wextra',
                # Don't warn about unused function parameters.
                '-Wno-unused-parameter',
                # Don't warn about the "struct foo f = {0};" initialization
                # pattern.
                '-Wno-missing-field-initializers',
                #'-W',
                # Match OS X clang C++11 warning settings.
                '-Wno-c++11-narrowing',
              ],
          
            },
            'cflags!': [
                '-fno-exceptions'
              ],
            'cflags_cc+':[],
            'linkflags':[],
            'link_settings': {},  
            'include_dirs': [
              '/Users/dave/apps/node/deps/v8/src'
              ],
            'library_dirs':[],
            'libraries': [
                # TODO: fix node-gyp behavior that requires ../
              ]
        }],
    
        ['OS=="linux"', {
           'cflags': [
                #'<!@(pkg-config --cflags QtCore QtGui QtTest)'
              ],
           'cflags!':['-fno-exceptions'],
           'cflags_cc+': [
             '-fno-exceptions',
             '-fpermissive',
             '-std=c++11'
           ],
           'ldflags': [
                #'<!@(pkg-config --libs-only-L --libs-only-other QtCore QtGui QtTest)'
              ],
            'include_dirs':[
                '/opt/web/node/deps/v8/src',
              ],
            'libraries': [
                #'<!@(pkg-config --libs-only-l QtCore QtGui QtTest)'
              ],
            'linkflags':[
                '-v'
              ],
            'link_settings':{
                 'libraries': [
                    '-lm',
                    '-lstdc++'
                   ],
                 'library_dirs': []
              },  
            'conditions':[
                ['clang == 0 and gcc_version >=44',{
                  'cflags!':['-fno-tree-sink','-fno-tree-vrp'] # disable default compiler option
                  }
                ]
              ]
            },
        ],
        
        ['OS!="mac" and OS!="win"', {
          'cflags': [ '-fno-omit-frame-pointer' ]
        }]
      ]
    },
    {
      'target_name':'aaproperties',
      'type':'executable',
      #'variables': '',
      'sources': [
          'src/feature.cpp'
       ],
      'include_dirs': [
          'include',
          '/Users/dave/apps/node/deps/v8/src',
       ],
       'conditions': [
         # A list of condition specifications that can modify the contents of the items
         # in the global dictionary defined by this .gyp file based on the values of
         # different variables. The common us of a condition section in the top-level
         # dictionary is to add platform-specific targets to the targets list.
         ['OS=="mac" or OS=="Darwin"', {
           'variables':{
             'mac_sdk_min%':'10.8',
             'mac_deployment_target%':'10.8',
           },
           'mac_sdk_min': '<(mac_sdk_min)',
           'mac_deployment_target': '<(mac_deployment_target)',
           'xcode_settings': {
               'ALWAYS_SEARCH_USER_PATHS':'YES',
               'GCC_C_LANGUAGE_STANDARD': 'c99',         # -std=c99
               'GCC_CW_ASM_SYNTAX': 'NO',                # No -fasm-blocks
               'GCC_DYNAMIC_NO_PIC': 'NO',               # No -mdynamic-no-pic
                                                         # (Equivalent to -fPIC)
               'GCC_CW_ASM_SYNTAX': 'NO',                # No -fasm-blocks
               'GCC_ENABLE_CPP_EXCEPTIONS': 'NO',        # -fno-exceptions
               'GCC_ENABLE_CPP_RTTI': 'NO',              # -fno-rtti
               'GCC_ENABLE_PASCAL_STRINGS': 'NO',        # No -mpascal-strings
               'GCC_THREADSAFE_STATICS': 'NO',           # -fno-threadsafe-statics
               'GCC_TREAT_WARNINGS_AS_ERRORS': 'NO',     # -Werror
               'PREBINDING': 'NO',                       # No -Wl,-prebind
          
               # -mmacosx-version-min=10.5
               'MACOSX_DEPLOYMENT_TARGET':'<(mac_deployment_target)',
               'USE_HEADERMAP': 'NO',
          
               'GCC_OPTIMIZATION_LEVEL': '3',  # -O3     # optimize -O3
          
               # c++ 11 Options
               'CLANG_CXX_LANGUAGE_STANDARD': 'c++11',   # c++
               'OTHER_CPLUSPLUSFLAGS':['-std=c++11','-stdlib=libc++'],
               'OTHER_LDFLAGS':['-stdlib=libc++'],       # when using c++11
          
               # Warn if automatic synthesis is triggered with
               # the -Wobjc-missing-property-synthesis flag.
               'CLANG_WARN_OBJC_MISSING_PROPERTY_SYNTHESIS': 'YES', 
          
               'OTHER_CFLAGS': [
                 '-fno-strict-aliasing',
                 '-fstack-protector-all',  # Implies -fstack-protector
               ],
          
               'WARNING_CFLAGS': [
                 '-Wall',
                 '-Wendif-labels',
                 '-Wextra',
                 # Don't warn about unused function parameters.
                 '-Wno-unused-parameter',
                 # Don't warn about the "struct foo f = {0};" initialization
                 # pattern.
                 '-Wno-missing-field-initializers',
                 '-W',
                 # Match OS X clang C++11 warning settings.
                 '-Wno-c++11-narrowing',
               ],
          
             },
             'cflags!': [
                 '-fno-exceptions'
               ],
             'cflags_cc+':[],
             'linkflags':[],
             'link_settings': {},  
             'include_dirs': [
               '/Users/dave/apps/node/deps/v8/src'
               ],
             'library_dirs':[],
             'libraries': [
                 # TODO: fix node-gyp behavior that requires ../
               ]
         }],
    
         ['OS=="linux"', {
            'cflags': [
                 #'<!@(pkg-config --cflags QtCore QtGui QtTest)'
               ],
            'cflags!':['-fno-exceptions'],
            'cflags_cc+': [
              '-fno-exceptions',
              '-fpermissive',
              '-std=c++11',
            ],
            'ldflags': [
                #'<!@(pkg-config --libs-only-L --libs-only-other QtCore QtGui QtTest)'
               ],
             'include_dirs':[
                 '/opt/web/node/deps/v8/src',
               ],
             'libraries': [
                 #'<!@(pkg-config --libs-only-l QtCore QtGui QtTest)'
               ],
             'linkflags':[
                 '-v'
               ],
             'link_settings':{
                  'libraries': ['-lm','-lstdc++'],
                  'library_dirs': []
               },  
             'conditions':[
                 ['clang == 0 and gcc_version >=44',
                   {
                     'cflags!':[
                       '-fno-tree-sink',
                       '-fno-tree-vrp',
                       ], 
                   },
                 ]
               ],
            } # end of OS == linux
         ],
        
         ['OS!="mac" and OS!="win"', {
           'cflags': [ '-fno-omit-frame-pointer' ]
         }]
       ]
    }
  ],
    

}
